# Dependabot PR 자동 병합 워크플로우
# Dependabot이 생성한 PR을 특정 조건에 따라 자동으로 병합합니다.
name: Auto-merge Dependabot PRs

# 트리거 조건: PR이 열리거나 업데이트될 때 실행
# pull_request_target을 사용하여 forked repo에서도 안전하게 실행
on:
  pull_request_target:
    types: [opened, synchronize]

# 워크플로우에 필요한 권한 설정
permissions:
  contents: write        # 코드 병합을 위한 권한
  pull-requests: write   # PR 조작을 위한 권한

jobs:
  dependabot:
    runs-on: ubuntu-latest
    # Dependabot이 생성한 PR에서만 실행
    if: github.actor == 'dependabot[bot]'
    steps:
      # Dependabot PR의 메타데이터 수집 (업데이트 타입, 의존성 종류 등)
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      # 개발 의존성의 모든 업데이트 자동 병합 (squash merge 사용)
      # 개발 의존성은 프로덕션에 영향을 주지 않으므로 모든 업데이트 허용
      - name: Auto-merge for all updates in dev dependencies
        if: steps.metadata.outputs.dependency-type == 'direct:development'
        run: gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # 프로덕션 의존성의 패치 업데이트만 자동 병합 (squash merge 사용)
      # 예: 1.2.3 → 1.2.4 (버그 수정, 보안 패치 등 - 안전함)
      - name: Auto-merge for patch updates in production dependencies
        if: |
          steps.metadata.outputs.update-type == 'version-update:semver-patch' &&
          steps.metadata.outputs.dependency-type == 'direct:production'
        run: gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

# ⚠️ 주의사항:
# 1. 프로덕션 의존성의 메이저/마이너 업데이트는 수동 검토 권장
# 2. Branch protection rules 설정 시 CI 통과 후에만 자동 병합됨
# 3. --auto --squash 플래그로 squash merge 방식 사용하여 커밋 히스토리 정리

# 💡 자동 병합 조건:
# ✅ 개발 의존성 (devDependencies): 모든 업데이트 (patch/minor/major) 자동 병합
# ✅ 프로덕션 의존성 (dependencies): 패치 업데이트만 자동 병합 (x.x.1 → x.x.2)
# ❌ 프로덕션 의존성 마이너/메이저 업데이트: 수동 검토 필요
